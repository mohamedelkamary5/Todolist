{"version":3,"sources":["Components/TodoItems/TodoItmes.js","Components/AddItem/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["Todoitems","props","items","deletItem","listItems","length","map","item","key","id","className","name","age","onClick","Additem","state","handelChange","e","setState","target","value","handleSubmit","preventDefault","itemsadd","onSubmit","this","type","placeholder","onChange","Component","App","filter","addItem","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAgCeA,G,MA9BG,SAACC,GAAW,IACpBC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,UAETC,EADOF,EAAMG,OAEjBH,EAAMI,KAAI,SAACC,GACT,OACE,yBAAKC,IAAKD,EAAKE,IACb,0BAAMC,UAAU,QAAQH,EAAKI,MAC7B,0BAAMD,UAAU,OAAOH,EAAKK,KAC5B,0BAAMF,UAAU,cAAcG,QAAS,kBAAMV,EAAUI,EAAKE,MAA5D,YAON,iDAEF,OACE,yBAAKC,UAAU,aACb,6BACE,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,gBAAhB,WAEDN,K,OCyBQU,G,kNAjDbC,MAAQ,CACNJ,KAAM,GACNC,IAAK,I,EAGPI,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAI5BC,aAAe,SAACJ,GAEd,GADAA,EAAEK,iBAC0B,KAAxBL,EAAEE,OAAOR,KAAKS,OAAuC,KAAvBH,EAAEE,OAAOP,IAAIQ,MAC7C,OAAO,EAEP,EAAKnB,MAAMsB,SAAS,EAAKR,OACzB,EAAKG,SAAS,CACZP,KAAM,GACNC,IAAK,M,uDAMT,OACE,6BACE,0BAAMY,SAAUC,KAAKJ,cACnB,2BACEK,KAAK,OACLC,YAAY,gBACZlB,GAAG,OACHmB,SAAUH,KAAKT,aACfI,MAAOK,KAAKV,MAAMJ,OAEpB,2BACEe,KAAK,SACLC,YAAY,eACZlB,GAAG,MACHmB,SAAUH,KAAKT,aACfI,MAAOK,KAAKV,MAAMH,MAEpB,2BAAOc,KAAK,SAASN,MAAM,c,GA3CfS,cCsCPC,G,kNAlCbf,MAAQ,CACNb,MAAO,CACL,CAAEO,GAAI,EAAGE,KAAM,UAAWC,IAAK,IAC/B,CAAEH,GAAI,EAAGE,KAAM,QAASC,IAAK,IAC7B,CAAEH,GAAI,EAAGE,KAAM,UAAWC,IAAK,GAC/B,CAAEH,GAAI,EAAGE,KAAM,QAASC,IAAK,K,EAIjCT,UAAY,SAACM,GACX,IAAIP,EAAQ,EAAKa,MAAMb,MAAM6B,QAAO,SAACxB,GACnC,OAAOA,EAAKE,KAAOA,KAErB,EAAKS,SAAS,CAAEhB,W,EAGlB8B,QAAU,SAACzB,GACTA,EAAKE,GAAKwB,KAAKC,SACf,IAAIhC,EAAQ,EAAKa,MAAMb,MACvBA,EAAMiC,KAAK5B,GACX,EAAKW,SAAS,CAAEhB,W,uDAIhB,OACE,yBAAKQ,UAAU,iBACb,wBAAIA,UAAU,cAAd,gBACA,kBAAC,EAAD,CAAWR,MAAOuB,KAAKV,MAAMb,MAAOC,UAAWsB,KAAKtB,YACpD,kBAAC,EAAD,CAASoB,SAAUE,KAAKO,e,GA7BdH,cCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0b0d70ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoItems.css\";\r\nconst Todoitems = (props) => {\r\n  const { items, deletItem } = props;\r\n  let length = items.length;\r\n  const listItems = length ? (\r\n    items.map((item) => {\r\n      return (\r\n        <div key={item.id}>\r\n          <span className=\"name\">{item.name}</span>\r\n          <span className=\"age\">{item.age}</span>\r\n          <span className=\"action icon\" onClick={() => deletItem(item.id)}>\r\n            &times;\r\n          </span>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <p>not find the items</p>\r\n  );\r\n  return (\r\n    <div className=\"ListItems\">\r\n      <div>\r\n        <span className=\"name title\">Name</span>\r\n        <span className=\"age title\">Age</span>\r\n        <span className=\"action title\">Action</span>\r\n      </div>\r\n      {listItems}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todoitems;\r\n","import React, { Component } from \"react\";\r\nimport \"./AddItem.css\";\r\nclass Additem extends Component {\r\n  state = {\r\n    name: \"\",\r\n    age: \"\",\r\n  };\r\n\r\n  handelChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (e.target.name.value === \"\" || e.target.age.value === \"\") {\r\n      return false;\r\n    } else {\r\n      this.props.itemsadd(this.state);\r\n      this.setState({\r\n        name: \"\",\r\n        age: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"enter name...\"\r\n            id=\"name\"\r\n            onChange={this.handelChange}\r\n            value={this.state.name}\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"enter age...\"\r\n            id=\"age\"\r\n            onChange={this.handelChange}\r\n            value={this.state.age}\r\n          />\r\n          <input type=\"submit\" value=\"Add\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Additem;\r\n\r\n// 6:00\r\n","import React, { Component } from \"react\";\nimport Todoitems from \"./Components/TodoItems/TodoItmes\";\nimport Additem from \"./Components/AddItem/AddItem\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    items: [\n      { id: 1, name: \"Mohamed\", age: 20 },\n      { id: 2, name: \"Ghada\", age: 21 },\n      { id: 3, name: \"Mostafa\", age: 2 },\n      { id: 4, name: \"Ahmed\", age: 2 },\n    ],\n  };\n\n  deletItem = (id) => {\n    let items = this.state.items.filter((item) => {\n      return item.id !== id;\n    });\n    this.setState({ items });\n  };\n\n  addItem = (item) => {\n    item.id = Math.random();\n    let items = this.state.items;\n    items.push(item);\n    this.setState({ items });\n  };\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"title-main\">TodoList App</h1>\n        <Todoitems items={this.state.items} deletItem={this.deletItem} />\n        <Additem itemsadd={this.addItem} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// let items = this.state.items\n// let item = items.findIndex(item => item.id === id)\n// items.splice(item, 1)\n// this.setState({items})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}